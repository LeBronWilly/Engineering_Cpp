// prog17_9, 使用虛擬解構元
#include <iostream>
#include <cstdlib>
using namespace std;
class CShape                        // 定義抽象類別CShape
{
   public:
      virtual int area()=0;  		// 定義area()為泛虛擬函數
      virtual void show_area()=0;    	// 定義show_area()為虛擬函數
//      virtual void show_area()    	// 定義show_area()為虛擬函數
//      { 
//         cout << "area = " << area() << " from CShape" <<endl;
//      }
      virtual ~CShape();             // 定義 ~CShape() 為虛擬解構元 
//      {
//         cout << "~CShape()解構元被呼叫了..." << endl;
//      } 
};
CShape::~CShape()             // 定義 ~CShape() 為虛擬解構元 
{
    cout << "~CShape()解構元被呼叫了..." << endl;
}

class CWin : public CShape          // 定義由CShape所衍生出的子類別CWin
{
   protected:
     int width, height;
     
   public:
     CWin(int w=10, int h=10):width(w),height(h){} // CWin()建構元
     
     virtual int area() {return width*height; }
     
     void show_area() {
        cout << "CWin物件的面積 = " << area() << endl;
     } 
     ~CWin();  		                // ~CWin() 解構元 
//     {
//        cout << "~CWin()解構元被呼叫了..." << endl;
//     }   
};
CWin::~CWin()  		                // ~CWin() 解構元 
{
    cout << "~CWin()解構元被呼叫了..." << endl;
}

class CMiniWin : public CWin        // 定義由CWin所衍生出的子類別CMiniWin
{
   public:     
     CMiniWin(int w,int h):CWin(w,h){}    // CMiniWin()建構元
     
     virtual int area() {
        return (int) (0.5*width*height);
     }
     void show_area(){
        cout << "CMiniWin物件的面積 = " << area() << endl;
     }       
     ~CMiniWin();   	                // ~CMiniWin() 解構元 
//     {
//        cout << "~CMiniWin()解構元被呼叫了..." << endl;
//     }   
};
CMiniWin::~CMiniWin()   	                // ~CMiniWin() 解構元 
{
    cout << "~CMiniWin()解構元被呼叫了..." << endl;
}

int main(void)
{
   CShape *ptr=new CWin(50,60);	
   ptr->show_area();
   cout << "銷毀CWin物件..." << endl;
   delete ptr;
   cout << endl;     
   
   ptr=new CMiniWin(50,50);
   ptr->show_area();
   cout << "銷毀CMiniWin物件..." << endl;
   delete ptr;   
   cout << endl;
    
   CMiniWin m_win(100,100); 
   m_win.show_area();
   cout << endl;

   system("pause");
   return 0;
}
